{"version":3,"sources":["sv-wc-payment-gateway-google-pay.js"],"names":["jQuery","document","ready","$","window","SV_WC_Google_Pay_Handler_v5_10_0","params","plugin_id","merchant_id","merchant_name","gateway_id","ajax_url","gateway_id_dasherized","recalculate_totals_nonce","process_nonce","button_style","card_types","available_countries","currency_code","generic_error","gatewayID","merchantID","merchantName","ajaxURL","recalculateTotalsNonce","processNonce","buttonStyle","availableCountries","currencyCode","genericError","product_id","productID","allowedCardNetworks","baseRequest","apiVersion","apiVersionMinor","allowedCardAuthMethods","tokenizationSpecification","type","parameters","baseCardPaymentMethod","allowedAuthMethods","cardPaymentMethod","Object","assign","paymentsClient","allowedPaymentMethods","resolve","getGoogleTransactionInfo","transactionInfo","paymentDataRequest","merchantInfo","merchantId","callbackIntents","emailRequired","shippingAddressRequired","shippingAddressParameters","getGoogleShippingAddressParameters","shippingOptionRequired","google","payments","api","PaymentsClient","paymentDataCallbacks","onPaymentAuthorized","paymentData","onPaymentDataChanged","block_ui","Promise","reject","processPayment","err","transactionState","error","intent","message","reason","unblock_ui","intermediatePaymentData","shippingAddress","shippingOptionData","chosenShippingMethod","callbackTrigger","id","getUpdatedTotals","paymentDataRequestUpdate","newShippingOptionParameters","shippingOptions","length","getGoogleUnserviceableAddressError","fail_payment","data","action","post","response","success","parseJSON","shippingMethod","allowedCountryCodes","phoneNumberRequired","button","getGooglePaymentsClient","createButton","onClick","event","onGooglePaymentButtonClicked","buttonColor","getElementById","appendChild","getGooglePaymentDataRequest","totalPriceStatus","prefetchPaymentData","nonce","JSON","stringify","location","redirect","preventDefault","loadPaymentData","init_product_page","init_cart_page","init_checkout_page","isReadyToPay","getGoogleIsReadyToPayRequest","then","result","addGooglePayButton","prefetchGooglePaymentData","catch","ui_element","parents","console","render_errors","errors","remove","prepend","join","removeClass","unblock","animate","scrollTop","offset","top","block","overlayCSS","background","opacity","body","trigger"],"mappings":"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","file":"sv-wc-payment-gateway-google-pay.js","sourceRoot":"..","sourcesContent":["jQuery( document ).ready( ( $ ) => {\n\n\t\"use strict\"\n\n\t/**\n\t * Google Pay handler.\n\t *\n\t * @since 5.10.0\n\t *\n\t * @type {SV_WC_Google_Pay_Handler_v5_10_0} object\n\t */\n\twindow.SV_WC_Google_Pay_Handler_v5_10_0 = class SV_WC_Google_Pay_Handler_v5_10_0 {\n\n\t\t/**\n\t\t * Handler constructor.\n\t\t *\n\t\t * @since 5.10.0\n\t\t *\n\t\t * @param {Object} params The plugin ID\n\t\t * @param {string} params.plugin_id The plugin ID\n\t\t * @param {string} params.merchant_id The merchant ID\n\t\t * @param {string} params.merchant_name The site name\n\t\t * @param {string} params.gateway_id The gateway ID\n\t\t * @param {string} params.gateway_id_dasherized The gateway ID dasherized\n\t\t * @param {string} params.ajax_url The AJAX URL\n\t\t * @param {string} params.recalculate_totals_nonce Nonce for the recalculate_totals AJAX action\n\t\t * @param {string} params.process_nonce Nonce for the process AJAX action\n\t\t * @param {string} params.button_style The button style\n\t\t * @param {string[]} params.card_types The supported card types\n\t\t * @param {string[]} params.available_countries Array of two-letter country codes the gateway is available for\n\t\t * @param {string[]} params.currency_code WC configured currency\n\t\t * @param {string} params.generic_error The generic error message\n\t\t * @param {string} params.product_id The product ID if we are on a Product page\n\t\t */\n\t\tconstructor(params) {\n\n\t\t\tlet {\n\t\t\t\tplugin_id,\n\t\t\t\tmerchant_id,\n\t\t\t\tmerchant_name,\n\t\t\t\tgateway_id,\n\t\t\t\tgateway_id_dasherized,\n\t\t\t\tajax_url,\n\t\t\t\trecalculate_totals_nonce,\n\t\t\t\tprocess_nonce,\n\t\t\t\tbutton_style,\n\t\t\t\tcard_types,\n\t\t\t\tavailable_countries,\n\t\t\t\tcurrency_code,\n\t\t\t\tgeneric_error\n\t\t\t} = params;\n\n\t\t\tthis.gatewayID = gateway_id;\n\t\t\tthis.merchantID = merchant_id;\n\t\t\tthis.merchantName = merchant_name;\n\t\t\tthis.ajaxURL = ajax_url;\n\t\t\tthis.recalculateTotalsNonce = recalculate_totals_nonce;\n\t\t\tthis.processNonce = process_nonce;\n\t\t\tthis.buttonStyle = button_style;\n\t\t\tthis.availableCountries = available_countries;\n\t\t\tthis.currencyCode = currency_code;\n\t\t\tthis.genericError = generic_error;\n\n\t\t\tif (params.product_id) {\n\t\t\t\tthis.productID = params.product_id;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Card networks supported by your site and your gateway\n\t\t\t *\n\t\t\t * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#CardParameters|CardParameters}\n\t\t\t */\n\t\t\tconst allowedCardNetworks = card_types;\n\n\t\t\t/**\n\t\t\t * Define the version of the Google Pay API referenced when creating your configuration\n\t\t\t *\n\t\t\t * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#PaymentDataRequest|apiVersion in PaymentDataRequest}\n\t\t\t */\n\t\t\tthis.baseRequest = {\n\t\t\t\tapiVersion: 2,\n\t\t\t\tapiVersionMinor: 0\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Card authentication methods supported by your site and your gateway\n\t\t\t *\n\t\t\t * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#CardParameters|CardParameters}\n\t\t\t *\n\t\t\t * @todo confirm your processor supports Android device tokens for your supported card networks\n\t\t\t */\n\t\t\tconst allowedCardAuthMethods = [\"PAN_ONLY\", \"CRYPTOGRAM_3DS\"];\n\n\t\t\t/**\n\t\t\t * Identify your gateway and your site's gateway merchant identifier\n\t\t\t *\n\t\t\t * The Google Pay API response will return an encrypted payment method capable\n\t\t\t * of being charged by a supported gateway after payer authorization\n\t\t\t *\n\t\t\t * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#gateway|PaymentMethodTokenizationSpecification}\n\t\t\t */\n\t\t\tconst tokenizationSpecification = {\n\t\t\t\ttype: 'PAYMENT_GATEWAY',\n\t\t\t\tparameters: {\n\t\t\t\t\t'gateway': plugin_id,\n\t\t\t\t\t'gatewayMerchantId': this.merchantID\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Describe your site's support for the CARD payment method and its required fields\n\t\t\t *\n\t\t\t * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#CardParameters|CardParameters}\n\t\t\t */\n\t\t\tthis.baseCardPaymentMethod = {\n\t\t\t\ttype: 'CARD',\n\t\t\t\tparameters: {\n\t\t\t\t\tallowedAuthMethods: allowedCardAuthMethods,\n\t\t\t\t\tallowedCardNetworks: allowedCardNetworks\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Describe your site's support for the CARD payment method including optional fields\n\t\t\t *\n\t\t\t * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#CardParameters|CardParameters}\n\t\t\t */\n\t\t\tthis.cardPaymentMethod = Object.assign(\n\t\t\t\t{},\n\t\t\t\tthis.baseCardPaymentMethod,\n\t\t\t\t{\n\t\t\t\t\ttokenizationSpecification: tokenizationSpecification\n\t\t\t\t}\n\t\t\t);\n\n\t\t\t/**\n\t\t\t * An initialized google.payments.api.PaymentsClient object or null if not yet set\n\t\t\t *\n\t\t\t * @see {@link getGooglePaymentsClient}\n\t\t\t */\n\t\t\tthis.paymentsClient = null;\n\t\t}\n\n\t\t/**\n\t\t * Configure your site's support for payment methods supported by the Google Pay\n\t\t * API.\n\t\t *\n\t\t * Each member of allowedPaymentMethods should contain only the required fields,\n\t\t * allowing reuse of this base request when determining a viewer's ability\n\t\t * to pay and later requesting a supported payment method\n\t\t *\n\t\t * @returns {object} Google Pay API version, payment methods supported by the site\n\t\t */\n\t\tgetGoogleIsReadyToPayRequest() {\n\n\t\t\treturn Object.assign(\n\t\t\t\t{},\n\t\t\t\tthis.baseRequest,\n\t\t\t\t{\n\t\t\t\t\tallowedPaymentMethods: [this.baseCardPaymentMethod]\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\n\t\t/**\n\t\t * Configure support for the Google Pay API\n\t\t *\n\t\t * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#PaymentDataRequest|PaymentDataRequest}\n\t\t *\n\t\t * @param {function} resolve callback\n\t\t * @returns {object} PaymentDataRequest fields\n\t\t */\n\t\tgetGooglePaymentDataRequest( resolve ) {\n\n\t\t\treturn this.getGoogleTransactionInfo( ( transactionInfo ) => {\n\n\t\t\t\tconst paymentDataRequest = Object.assign({}, this.baseRequest);\n\t\t\t\tpaymentDataRequest.allowedPaymentMethods = [this.cardPaymentMethod];\n\t\t\t\tpaymentDataRequest.transactionInfo = transactionInfo;\n\t\t\t\tpaymentDataRequest.merchantInfo = {\n\t\t\t\t\tmerchantId: this.merchantID,\n\t\t\t\t\tmerchantName: this.merchantName\n\t\t\t\t};\n\t\t\t\tpaymentDataRequest.callbackIntents = [\"SHIPPING_ADDRESS\", \"SHIPPING_OPTION\", \"PAYMENT_AUTHORIZATION\"];\n\t\t\t\tpaymentDataRequest.emailRequired = true;\n\t\t\t\tpaymentDataRequest.shippingAddressRequired = true;\n\t\t\t\tpaymentDataRequest.shippingAddressParameters = this.getGoogleShippingAddressParameters();\n\t\t\t\tpaymentDataRequest.shippingOptionRequired = true;\n\n\t\t\t\tresolve( paymentDataRequest );\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Return an active PaymentsClient or initialize\n\t\t *\n\t\t * @see {@link https://developers.google.com/pay/api/web/reference/client#PaymentsClient|PaymentsClient constructor}\n\t\t * @returns {google.payments.api.PaymentsClient} Google Pay API client\n\t\t */\n\t\tgetGooglePaymentsClient() {\n\t\t\tif ( this.paymentsClient === null ) {\n\t\t\t\tthis.paymentsClient = new google.payments.api.PaymentsClient({\n\t\t\t\t\tmerchantInfo: {\n\t\t\t\t\t\tmerchantName: this.merchantName,\n\t\t\t\t\t\tmerchantId: this.merchantID\n\t\t\t\t\t},\n\t\t\t\t\tpaymentDataCallbacks: {\n\t\t\t\t\t\tonPaymentAuthorized: (paymentData) => this.onPaymentAuthorized(paymentData),\n\t\t\t\t\t\tonPaymentDataChanged: (paymentData) => this.onPaymentDataChanged(paymentData)\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn this.paymentsClient;\n\t\t}\n\n\t\tonPaymentAuthorized(paymentData) {\n\n\t\t\tthis.block_ui();\n\n\t\t\treturn new Promise((resolve, reject) => {\n\n\t\t\t\t// handle the response\n\t\t\t\ttry {\n\t\t\t\t\tthis.processPayment(paymentData, resolve);\n\t\t\t\t}\tcatch(err) {\n\t\t\t\t\treject({\n\t\t\t\t\t\ttransactionState: 'ERROR',\n\t\t\t\t\t\terror: {\n\t\t\t\t\t\t\tintent: 'PAYMENT_AUTHORIZATION',\n\t\t\t\t\t\t\tmessage: 'Payment could not be processed',\n\t\t\t\t\t\t\treason: 'PAYMENT_DATA_INVALID'\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tthis.unblock_ui();\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Handles dynamic buy flow shipping address and shipping options callback intents.\n\t\t *\n\t\t * @param {object} intermediatePaymentData response from Google Pay API a shipping address or shipping option is selected in the payment sheet.\n\t\t * @see {@link https://developers.google.com/pay/api/web/reference/response-objects#IntermediatePaymentData|IntermediatePaymentData object reference}\n\t\t *\n\t\t * @see {@link https://developers.google.com/pay/api/web/reference/response-objects#PaymentDataRequestUpdate|PaymentDataRequestUpdate}\n\t\t * @returns Promise<{object}> Promise of PaymentDataRequestUpdate object to update the payment sheet.\n\t\t */\n\t\tonPaymentDataChanged(intermediatePaymentData) {\n\n\t\t\tthis.block_ui();\n\n\t\t\treturn new Promise((resolve, reject) => {\n\n\t\t\t\ttry {\n\t\t\t\t\tlet shippingAddress = intermediatePaymentData.shippingAddress;\n\t\t\t\t\tlet shippingOptionData = intermediatePaymentData.shippingOptionData;\n\t\t\t\t\tlet chosenShippingMethod = '';\n\n\t\t\t\t\tif (intermediatePaymentData.callbackTrigger == \"SHIPPING_OPTION\") {\n\t\t\t\t\t\tchosenShippingMethod = shippingOptionData.id;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.getUpdatedTotals( shippingAddress, chosenShippingMethod, ( paymentDataRequestUpdate ) => {\n\n\t\t\t\t\t\tif (paymentDataRequestUpdate.newShippingOptionParameters.shippingOptions.length == 0) {\n\t\t\t\t\t\t\tpaymentDataRequestUpdate = {\n\t\t\t\t\t\t\t\terror: this.getGoogleUnserviceableAddressError()\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresolve(paymentDataRequestUpdate);\n\t\t\t\t\t});\n\n\t\t\t\t}\tcatch(err) {\n\t\t\t\t\tthis.fail_payment( 'Could not load updated totals or process payment data request update. ' + err );\n\t\t\t\t}\n\n\t\t\t\tthis.unblock_ui();\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Provide Google Pay API with a payment amount, currency, and amount status\n\t\t *\n\t\t * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#TransactionInfo|TransactionInfo}\n\t\t *\n\t\t * @param {function} resolve callback\n\t\t * @returns {object} transaction info, suitable for use as transactionInfo property of PaymentDataRequest\n\t\t */\n\t\tgetGoogleTransactionInfo( resolve ) {\n\n\t\t\t// get transaction info from cart\n\t\t\tconst data = {\n\t\t\t\taction: `wc_${this.gatewayID}_google_pay_get_transaction_info`,\n\t\t\t}\n\n\t\t\tif (this.productID) {\n\t\t\t\tdata.productID = this.productID;\n\t\t\t}\n\n\t\t\t$.post(this.ajaxURL, data, ( response ) => {\n\n\t\t\t\tif (response.success) {\n\t\t\t\t\tresolve( $.parseJSON( response.data ) )\n\t\t\t\t} else {\n\t\t\t\t\tthis.fail_payment( 'Could not build transaction info. ' + response.data.message );\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Get updated totals and shipping options via AJAX for use in the PaymentDataRequest\n\t\t *\n\t\t * @see {@link https://developers.google.com/pay/api/web/reference/response-objects#PaymentDataRequestUpdate|PaymentDataRequestUpdate}\n\t\t *\n\t\t * @param {object} shippingAddress shipping address\n\t\t * @param {object} shippingMethod chosen shipping method\n\t\t * @param {function} resolve callback\n\t\t */\n\t\tgetUpdatedTotals( shippingAddress, shippingMethod, resolve ) {\n\n\t\t\tconst data = {\n\t\t\t\taction: `wc_${this.gatewayID}_google_pay_recalculate_totals`,\n\t\t\t\t'nonce': this.recalculateTotalsNonce,\n\t\t\t\tshippingAddress,\n\t\t\t\tshippingMethod\n\t\t\t}\n\n\t\t\tif (this.productID) {\n\t\t\t\tdata.productID = this.productID;\n\t\t\t}\n\n\t\t\t$.post(this.ajaxURL, data, ( response ) => {\n\n\t\t\t\tif (response.success) {\n\t\t\t\t\tresolve( $.parseJSON( response.data ) )\n\t\t\t\t} else {\n\t\t\t\t\tthis.fail_payment( 'Could not recalculate totals. ' + response.data.message );\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Provide Google Pay API with shipping address parameters when using dynamic buy flow.\n\t\t *\n\t\t * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#ShippingAddressParameters|ShippingAddressParameters}\n\t\t * @returns {object} shipping address details, suitable for use as shippingAddressParameters property of PaymentDataRequest\n\t\t */\n\t\tgetGoogleShippingAddressParameters() {\n\n\t\t\treturn  {\n\t\t\t\tallowedCountryCodes: this.availableCountries,\n\t\t\t\tphoneNumberRequired: true\n\t\t\t};\n\t\t}\n\n\t\t/**\n\t\t * Provide Google Pay API with a payment data error.\n\t\t *\n\t\t * @see {@link https://developers.google.com/pay/api/web/reference/response-objects#PaymentDataError|PaymentDataError}\n\t\t * @returns {object} payment data error, suitable for use as error property of PaymentDataRequestUpdate\n\t\t */\n\t\tgetGoogleUnserviceableAddressError() {\n\t\t\treturn {\n\t\t\t\treason: \"SHIPPING_ADDRESS_UNSERVICEABLE\",\n\t\t\t\tmessage: \"Cannot ship to the selected address\",\n\t\t\t\tintent: \"SHIPPING_ADDRESS\"\n\t\t\t};\n\t\t}\n\n\t\t/**\n\t\t * Add a Google Pay purchase button alongside an existing checkout button\n\t\t *\n\t\t * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#ButtonOptions|Button options}\n\t\t * @see {@link https://developers.google.com/pay/api/web/guides/brand-guidelines|Google Pay brand guidelines}\n\t\t */\n\t\taddGooglePayButton() {\n\n\t\t\tconst paymentsClient = this.getGooglePaymentsClient();\n\t\t\tconst button = paymentsClient.createButton({\n\t\t\t\tonClick: (event) => this.onGooglePaymentButtonClicked( event ),\n\t\t\t\tbuttonColor: this.buttonStyle\n\t\t\t});\n\t\t\tdocument.getElementById('sv-wc-google-pay-button-container').appendChild(button);\n\t\t}\n\n\t\t/**\n\t\t * Prefetch payment data to improve performance\n\t\t *\n\t\t * @see {@link https://developers.google.com/pay/api/web/reference/client#prefetchPaymentData|prefetchPaymentData()}\n\t\t */\n\t\tprefetchGooglePaymentData() {\n\n\t\t\tthis.getGooglePaymentDataRequest( ( paymentDataRequest ) => {\n\n\t\t\t\t// transactionInfo must be set but does not affect cache\n\t\t\t\tpaymentDataRequest.transactionInfo = {\n\t\t\t\t\ttotalPriceStatus: 'NOT_CURRENTLY_KNOWN',\n\t\t\t\t\tcurrencyCode: this.currencyCode\n\t\t\t\t};\n\t\t\t\tconst paymentsClient = this.getGooglePaymentsClient();\n\t\t\t\tpaymentsClient.prefetchPaymentData(paymentDataRequest);\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Process payment data returned by the Google Pay API\n\t\t *\n\t\t * @see {@link https://developers.google.com/pay/api/web/reference/response-objects#PaymentData|PaymentData object reference}\n\t\t *\n\t\t * @param {object} paymentData response from Google Pay API after user approves payment\n\t\t * @param {function} resolve callback\n\t\t */\n\t\tprocessPayment(paymentData, resolve) {\n\n\t\t\t// pass payment token to your gateway to process payment\n\t\t\tconst data = {\n\t\t\t\taction: `wc_${this.gatewayID}_google_pay_process_payment`,\n\t\t\t\tnonce: this.processNonce,\n\t\t\t\tpaymentData: JSON.stringify(paymentData)\n\t\t\t}\n\n\t\t\treturn $.post(this.ajaxURL, data, (response) => {\n\t\t\t\tif (response.success) {\n\t\t\t\t\tresolve({transactionState: 'SUCCESS'});\n\t\t\t\t\twindow.location = response.data.redirect;\n\t\t\t\t} else {\n\t\t\t\t\tresolve({\n\t\t\t\t\t\ttransactionState: 'ERROR',\n\t\t\t\t\t\terror: {\n\t\t\t\t\t\t\tintent: 'SHIPPING_ADDRESS',\n\t\t\t\t\t\t\tmessage: 'Invalid data',\n\t\t\t\t\t\t\treason: 'PAYMENT_DATA_INVALID'\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tthis.fail_payment( 'Payment could not be processed. ' + response.data.message );\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Show Google Pay payment sheet when Google Pay payment button is clicked\n\t\t */\n\t\tonGooglePaymentButtonClicked(event) {\n\n\t\t\tevent.preventDefault();\n\n\t\t\tthis.block_ui();\n\n\t\t\tthis.getGooglePaymentDataRequest( ( paymentDataRequest ) => {\n\n\t\t\t\tconst paymentsClient = this.getGooglePaymentsClient();\n\t\t\t\ttry {\n\t\t\t\t\tpaymentsClient.loadPaymentData(paymentDataRequest);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tthis.fail_payment( 'Could not load payment data. ' + err );\n\t\t\t\t}\n\n\t\t\t\tthis.unblock_ui();\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Initialize Google PaymentsClient after Google-hosted JavaScript has loaded\n\t\t *\n\t\t * Display a Google Pay payment button after confirmation of the viewer's\n\t\t * ability to pay.\n\t\t */\n\t\tinit() {\n\n\t\t\t// initialize for the various pages\n\t\t\tif ($('form.cart').length) {\n\t\t\t\tthis.init_product_page();\n\t\t\t} else if ($('form.woocommerce-cart-form').length) {\n\t\t\t\tthis.init_cart_page();\n\t\t\t} else if ($('form.woocommerce-checkout').length) {\n\t\t\t\tthis.init_checkout_page()\n\t\t\t} else {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst paymentsClient = this.getGooglePaymentsClient();\n\t\t\tpaymentsClient.isReadyToPay(this.getGoogleIsReadyToPayRequest())\n\t\t\t\t.then((response) => {\n\t\t\t\t\tif (response.result) {\n\t\t\t\t\t\tthis.addGooglePayButton();\n\t\t\t\t\t\t// prefetch payment data to improve performance\n\t\t\t\t\t\tthis.prefetchGooglePaymentData();\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch((err) => {\n\t\t\t\t\tthis.fail_payment( 'Google Pay is not ready. ' + err );\n\t\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Initializes the product page.\n\t\t */\n\t\tinit_product_page() {\n\t\t\tthis.ui_element = $('form.cart');\n\t\t}\n\n\t\t/**\n\t\t * Initializes the cart page.\n\t\t */\n\t\tinit_cart_page() {\n\t\t\tthis.ui_element = $('form.woocommerce-cart-form').parents('div.woocommerce');\n\t\t}\n\n\t\t/**\n\t\t * Initializes the checkout page.\n\t\t */\n\t\tinit_checkout_page() {\n\t\t\tthis.ui_element = $('form.woocommerce-checkout');\n\t\t}\n\n\t\t/**\n\t\t * Fails the purchase based on the gateway result.\n\t\t */\n\t\tfail_payment ( error ) {\n\n\t\t\tconsole.error( '[Google Pay] ' + error );\n\n\t\t\tthis.unblock_ui();\n\n\t\t\tthis.render_errors( [ this.genericError ] );\n\t\t}\n\n\t\t/**\n\t\t * Renders any new errors and bring them into the viewport.\n \t\t */\n\t\trender_errors( errors ) {\n\n\t\t\t// hide and remove any previous errors\n\t\t\t$('.woocommerce-error, .woocommerce-message').remove();\n\n\t\t\t// add errors\n\t\t\tthis.ui_element.prepend('<ul class=\"woocommerce-error\"><li>' + errors.join('</li><li>') + '</li></ul>');\n\n\t\t\t// unblock UI\n\t\t\tthis.ui_element.removeClass('processing').unblock();\n\n\t\t\t// scroll to top\n\t\t\t$('html, body').animate({scrollTop: this.ui_element.offset().top - 100}, 1000);\n\t\t}\n\n\t\t/**\n\t\t * Blocks the payment form UI.\n\t\t */\n\t\tblock_ui() {\n\t\t\tthis.ui_element.block({message: null, overlayCSS: {background: '#fff', opacity: 0.6}});\n\t\t}\n\n\t\t/**\n\t\t * Unblocks the payment form UI.\n\t\t */\n\t\tunblock_ui() {\n\t\t\tthis.ui_element.unblock();\n\t\t}\n\t}\n\n\t$( document.body ).trigger( 'sv_wc_google_pay_handler_v5_10_0_loaded' );\n\n});\n"]}