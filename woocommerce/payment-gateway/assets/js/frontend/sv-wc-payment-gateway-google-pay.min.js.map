{"version":3,"sources":["sv-wc-payment-gateway-google-pay.js"],"names":["jQuery","document","ready","$","window","SV_WC_Google_Pay_Handler_v5_8_1","params","plugin_id","merchant_id","gateway_id","gateway_id_dasherized","ajax_url","process_nonce","button_style","card_types","generic_error","gatewayID","merchantID","ajaxURL","processNonce","genericError","allowedCardNetworks","baseRequest","apiVersion","apiVersionMinor","allowedCardAuthMethods","tokenizationSpecification","type","parameters","baseCardPaymentMethod","allowedAuthMethods","cardPaymentMethod","Object","assign","paymentsClient","allowedPaymentMethods","getGoogleTransactionInfo","transactionInfo","console","log","paymentDataRequest","merchantInfo","merchantName","callbackIntents","shippingAddressRequired","shippingAddressParameters","getGoogleShippingAddressParameters","shippingOptionRequired","google","payments","api","PaymentsClient","environment","merchantId","paymentDataCallbacks","onPaymentAuthorized","paymentData","onPaymentDataChanged","Promise","resolve","reject","processPayment","err","error","transactionState","intent","message","reason","intermediatePaymentData","shippingAddress","shippingOptionData","paymentDataRequestUpdate","callbackTrigger","administrativeArea","getGoogleUnserviceableAddressError","newShippingOptionParameters","getGoogleDefaultShippingOptions","selectedShippingOptionId","defaultSelectedOptionId","newTransactionInfo","calculateNewTransactionInfo","id","shippingOptionId","shippingCost","getShippingCosts","displayItems","push","label","price","status","totalPrice","forEach","displayItem","parseFloat","toString","data","action","post","response","success","parseJSON","fail_payment","allowedCountryCodes","phoneNumberRequired","shippingOptions","getGooglePaymentsClient","button","createButton","onClick","onGooglePaymentButtonClicked","getElementById","appendChild","getGooglePaymentDataRequest","then","totalPriceStatus","currencyCode","prefetchPaymentData","nonce","paymentMethod","JSON","stringify","paymentMethodData","location","redirect","block_ui","loadPaymentData","length","init_product_page","init_cart_page","init_checkout_page","isReadyToPay","getGoogleIsReadyToPayRequest","result","addGooglePayButton","ui_element","parents","unblock_ui","render_errors","errors","remove","prepend","join","removeClass","unblock","animate","scrollTop","offset","top","block","overlayCSS","background","opacity","body","trigger"],"mappings":"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","sourcesContent":["jQuery( document ).ready( ( $ ) => {\n\n\t\"use strict\"\n\n\t/**\n\t * Google Pay handler.\n\t *\n\t * @since 5.9.0-dev.1\n\t *\n\t * @type {SV_WC_Google_Pay_Handler_v5_8_1} object\n\t */\n\twindow.SV_WC_Google_Pay_Handler_v5_8_1 = class SV_WC_Google_Pay_Handler_v5_8_1 {\n\n\t\t/**\n\t\t * Handler constructor.\n\t\t *\n\t\t * @since 5.9.0-dev.1\n\t\t *\n\t\t * @param {Object} params The plugin ID\n\t\t * @param {string} params.plugin_id The plugin ID\n\t\t * @param {string} params.merchant_id The merchant ID\n\t\t * @param {string} params.gateway_id The gateway ID\n\t\t * @param {string} params.gateway_id_dasherized The gateway ID dasherized\n\t\t * @param {string} params.ajax_url The AJAX URL\n\t\t * @param {string} params.process_nonce Nonce for the process AJAX action\n\t\t * @param {string} params.button_style The button style\n\t\t * @param {string[]} params.card_types The supported card types\n\t\t * @param {string} params.generic_error The generic error message\n\t\t */\n\t\tconstructor(params) {\n\n\t\t\tlet {\n\t\t\t\tplugin_id,\n\t\t\t\tmerchant_id,\n\t\t\t\tgateway_id,\n\t\t\t\tgateway_id_dasherized,\n\t\t\t\tajax_url,\n\t\t\t\tprocess_nonce,\n\t\t\t\tbutton_style,\n\t\t\t\tcard_types,\n\t\t\t\tgeneric_error\n\t\t\t} = params;\n\n\t\t\tthis.gatewayID = gateway_id;\n\t\t\tthis.merchantID = merchant_id;\n\t\t\tthis.ajaxURL = ajax_url;\n\t\t\tthis.processNonce = process_nonce;\n\t\t\tthis.genericError = generic_error;\n\n\t\t\t/**\n\t\t\t * Card networks supported by your site and your gateway\n\t\t\t *\n\t\t\t * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#CardParameters|CardParameters}\n\t\t\t */\n\t\t\tconst allowedCardNetworks = card_types;\n\n\t\t\t/**\n\t\t\t * Define the version of the Google Pay API referenced when creating your configuration\n\t\t\t *\n\t\t\t * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#PaymentDataRequest|apiVersion in PaymentDataRequest}\n\t\t\t */\n\t\t\tthis.baseRequest = {\n\t\t\t\tapiVersion: 2,\n\t\t\t\tapiVersionMinor: 0\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Card authentication methods supported by your site and your gateway\n\t\t\t *\n\t\t\t * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#CardParameters|CardParameters}\n\t\t\t *\n\t\t\t * @todo confirm your processor supports Android device tokens for your supported card networks\n\t\t\t */\n\t\t\tconst allowedCardAuthMethods = [\"PAN_ONLY\", \"CRYPTOGRAM_3DS\"];\n\n\t\t\t/**\n\t\t\t * Identify your gateway and your site's gateway merchant identifier\n\t\t\t *\n\t\t\t * The Google Pay API response will return an encrypted payment method capable\n\t\t\t * of being charged by a supported gateway after payer authorization\n\t\t\t *\n\t\t\t * @todo check with your gateway on the parameters to pass\n\t\t\t * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#gateway|PaymentMethodTokenizationSpecification}\n\t\t\t */\n\t\t\tconst tokenizationSpecification = {\n\t\t\t\ttype: 'PAYMENT_GATEWAY',\n\t\t\t\tparameters: {\n\t\t\t\t\t'gateway': plugin_id,\n\t\t\t\t\t'gatewayMerchantId': this.merchantID\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Describe your site's support for the CARD payment method and its required fields\n\t\t\t *\n\t\t\t * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#CardParameters|CardParameters}\n\t\t\t */\n\t\t\tthis.baseCardPaymentMethod = {\n\t\t\t\ttype: 'CARD',\n\t\t\t\tparameters: {\n\t\t\t\t\tallowedAuthMethods: allowedCardAuthMethods,\n\t\t\t\t\tallowedCardNetworks: allowedCardNetworks\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Describe your site's support for the CARD payment method including optional fields\n\t\t\t *\n\t\t\t * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#CardParameters|CardParameters}\n\t\t\t */\n\t\t\tthis.cardPaymentMethod = Object.assign(\n\t\t\t\t{},\n\t\t\t\tthis.baseCardPaymentMethod,\n\t\t\t\t{\n\t\t\t\t\ttokenizationSpecification: tokenizationSpecification\n\t\t\t\t}\n\t\t\t);\n\n\t\t\t/**\n\t\t\t * An initialized google.payments.api.PaymentsClient object or null if not yet set\n\t\t\t *\n\t\t\t * @see {@link getGooglePaymentsClient}\n\t\t\t */\n\t\t\tthis.paymentsClient = null;\n\t\t}\n\n\t\t/**\n\t\t * Configure your site's support for payment methods supported by the Google Pay\n\t\t * API.\n\t\t *\n\t\t * Each member of allowedPaymentMethods should contain only the required fields,\n\t\t * allowing reuse of this base request when determining a viewer's ability\n\t\t * to pay and later requesting a supported payment method\n\t\t *\n\t\t * @returns {object} Google Pay API version, payment methods supported by the site\n\t\t */\n\t\tgetGoogleIsReadyToPayRequest() {\n\n\t\t\treturn Object.assign(\n\t\t\t\t{},\n\t\t\t\tthis.baseRequest,\n\t\t\t\t{\n\t\t\t\t\tallowedPaymentMethods: [this.baseCardPaymentMethod]\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\n\t\t/**\n\t\t * Configure support for the Google Pay API\n\t\t *\n\t\t * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#PaymentDataRequest|PaymentDataRequest}\n\t\t * @returns {object} PaymentDataRequest fields\n\t\t */\n\t\tgetGooglePaymentDataRequest() {\n\n\t\t\treturn this.getGoogleTransactionInfo( ( transactionInfo ) => {\n\n\t\t\t\tconsole.log( 'transactionInfo' );\n\t\t\t\tconsole.log( transactionInfo );\n\n\t\t\t\tconst paymentDataRequest = Object.assign({}, this.baseRequest);\n\t\t\t\tpaymentDataRequest.allowedPaymentMethods = [this.cardPaymentMethod];\n\n\t\t\t\tpaymentDataRequest.transactionInfo = transactionInfo;\n\n\t\t\t\tconsole.log(paymentDataRequest);\n\n\t\t\t\tpaymentDataRequest.merchantInfo = {\n\t\t\t\t\t// @todo a merchant ID is available for a production environment after approval by Google\n\t\t\t\t\t// See {@link https://developers.google.com/pay/api/web/guides/test-and-deploy/integration-checklist|Integration checklist}\n\t\t\t\t\t// merchantId: '01234567890123456789',\n\t\t\t\t\tmerchantName: 'Example Merchant'\n\t\t\t\t};\n\n\t\t\t\tpaymentDataRequest.callbackIntents = [\"SHIPPING_ADDRESS\", \"SHIPPING_OPTION\", \"PAYMENT_AUTHORIZATION\"];\n\t\t\t\tpaymentDataRequest.shippingAddressRequired = true;\n\t\t\t\tpaymentDataRequest.shippingAddressParameters = this.getGoogleShippingAddressParameters();\n\t\t\t\tpaymentDataRequest.shippingOptionRequired = true;\n\n\t\t\t\treturn paymentDataRequest;\n\t\t\t} );\n\t\t}\n\n\t\t/**\n\t\t * Return an active PaymentsClient or initialize\n\t\t *\n\t\t * @see {@link https://developers.google.com/pay/api/web/reference/client#PaymentsClient|PaymentsClient constructor}\n\t\t * @returns {google.payments.api.PaymentsClient} Google Pay API client\n\t\t */\n\t\tgetGooglePaymentsClient() {\n\t\t\tif ( this.paymentsClient === null ) {\n\t\t\t\tthis.paymentsClient = new google.payments.api.PaymentsClient({\n\t\t\t\t\tenvironment: \"TEST\",\n\t\t\t\t\tmerchantInfo: {\n\t\t\t\t\t\tmerchantName: \"Example Merchant\",\n\t\t\t\t\t\tmerchantId: this.merchantID\n\t\t\t\t\t},\n\t\t\t\t\tpaymentDataCallbacks: {\n\t\t\t\t\t\tonPaymentAuthorized: (paymentData) => this.onPaymentAuthorized(paymentData),\n\t\t\t\t\t\tonPaymentDataChanged: (paymentData) => this.onPaymentDataChanged(paymentData)\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn this.paymentsClient;\n\t\t}\n\n\t\tonPaymentAuthorized(paymentData) {\n\n\t\t\tconsole.log('onPaymentAuthorized');\n\t\t\tconsole.log(paymentData);\n\n\t\t\treturn new Promise((resolve, reject) => {\n\n\t\t\t\t// handle the response\n\t\t\t\ttry {\n\t\t\t\t\tthis.processPayment(paymentData, resolve);\n\t\t\t\t\t\t// .then(() => {\n\t\t\t\t\t\t// \tresolve({transactionState: 'SUCCESS'});\n\t\t\t\t\t\t// })\n\t\t\t\t\t\t// .catch(() => {\n\t\t\t\t\t\t// \tconsole.log('catch');\n\t\t\t\t\t\t// \tresolve({\n\t\t\t\t\t\t// \t\ttransactionState: 'ERROR',\n\t\t\t\t\t\t// \t\terror: {\n\t\t\t\t\t\t// \t\t\tintent: 'SHIPPING_ADDRESS',\n\t\t\t\t\t\t// \t\t\tmessage: 'Invalid data',\n\t\t\t\t\t\t// \t\t\treason: 'PAYMENT_DATA_INVALID'\n\t\t\t\t\t\t// \t\t}\n\t\t\t\t\t\t// \t});\n\t\t\t\t\t\t// });\n\t\t\t\t}\tcatch(err) {\n\t\t\t\t\tconsole.log('catch');\n\t\t\t\t\t// show error in developer console for debugging\n\t\t\t\t\tconsole.error(err);\n\t\t\t\t\treject({\n\t\t\t\t\t\ttransactionState: 'ERROR',\n\t\t\t\t\t\terror: {\n\t\t\t\t\t\t\tintent: 'PAYMENT_AUTHORIZATION',\n\t\t\t\t\t\t\tmessage: 'Insufficient funds',\n\t\t\t\t\t\t\treason: 'PAYMENT_DATA_INVALID'\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Handles dynamic buy flow shipping address and shipping options callback intents.\n\t\t *\n\t\t * @param {object} intermediatePaymentData response from Google Pay API a shipping address or shipping option is selected in the payment sheet.\n\t\t * @see {@link https://developers.google.com/pay/api/web/reference/response-objects#IntermediatePaymentData|IntermediatePaymentData object reference}\n\t\t *\n\t\t * @see {@link https://developers.google.com/pay/api/web/reference/response-objects#PaymentDataRequestUpdate|PaymentDataRequestUpdate}\n\t\t * @returns Promise<{object}> Promise of PaymentDataRequestUpdate object to update the payment sheet.\n\t\t */\n\t\tonPaymentDataChanged(intermediatePaymentData) {\n\n\t\t\tconsole.log('onPaymentDataChanged');\n\t\t\tconsole.log(intermediatePaymentData);\n\n\t\t\treturn new Promise((resolve, reject) => {\n\n\t\t\t\tconsole.log(resolve);\n\t\t\t\tconsole.log(reject);\n\n\t\t\t\ttry {\n\t\t\t\t\tlet shippingAddress = intermediatePaymentData.shippingAddress;\n\t\t\t\t\tlet shippingOptionData = intermediatePaymentData.shippingOptionData;\n\t\t\t\t\tlet paymentDataRequestUpdate = {};\n\n\t\t\t\t\tif (intermediatePaymentData.callbackTrigger == \"INITIALIZE\" || intermediatePaymentData.callbackTrigger == \"SHIPPING_ADDRESS\") {\n\t\t\t\t\t\tif (shippingAddress.administrativeArea == \"NJ\") {\n\t\t\t\t\t\t\tpaymentDataRequestUpdate.error = this.getGoogleUnserviceableAddressError();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpaymentDataRequestUpdate.newShippingOptionParameters = this.getGoogleDefaultShippingOptions();\n\t\t\t\t\t\t\tlet selectedShippingOptionId = paymentDataRequestUpdate.newShippingOptionParameters.defaultSelectedOptionId;\n\t\t\t\t\t\t\tpaymentDataRequestUpdate.newTransactionInfo = this.calculateNewTransactionInfo(selectedShippingOptionId);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (intermediatePaymentData.callbackTrigger == \"SHIPPING_OPTION\") {\n\t\t\t\t\t\tpaymentDataRequestUpdate.newTransactionInfo = this.calculateNewTransactionInfo(shippingOptionData.id);\n\t\t\t\t\t}\n\n\t\t\t\t\tconsole.log('paymentDataRequestUpdate');\n\t\t\t\t\tconsole.log(paymentDataRequestUpdate);\n\n\t\t\t\t\tresolve(paymentDataRequestUpdate);\n\t\t\t\t}\tcatch(err) {\n\t\t\t\t\tconsole.log('catch');\n\t\t\t\t\t// show error in developer console for debugging\n\t\t\t\t\tconsole.error(err);\n\t\t\t\t\treject({\n\t\t\t\t\t\ttransactionState: 'ERROR',\n\t\t\t\t\t\terror: {\n\t\t\t\t\t\t\tintent: 'PAYMENT_AUTHORIZATION',\n\t\t\t\t\t\t\tmessage: 'Insufficient funds',\n\t\t\t\t\t\t\treason: 'PAYMENT_DATA_INVALID'\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Helper function to create a new TransactionInfo object.\n\n\t\t * @param string shippingOptionId respresenting the selected shipping option in the payment sheet.\n\t\t *\n\t\t * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#TransactionInfo|TransactionInfo}\n\t\t * @returns {object} transaction info, suitable for use as transactionInfo property of PaymentDataRequest\n\t\t */\n\t\tcalculateNewTransactionInfo(shippingOptionId) {\n\n\t\t\tthis.getGoogleTransactionInfo( ( newTransactionInfo ) => {\n\n\t\t\t\tlet shippingCost = this.getShippingCosts()[shippingOptionId];\n\t\t\t\tnewTransactionInfo.displayItems.push({\n\t\t\t\t\ttype: \"LINE_ITEM\",\n\t\t\t\t\tlabel: \"Shipping cost\",\n\t\t\t\t\tprice: shippingCost,\n\t\t\t\t\tstatus: \"FINAL\"\n\t\t\t\t});\n\n\t\t\t\tlet totalPrice = 0.00;\n\t\t\t\tnewTransactionInfo.displayItems.forEach(displayItem => totalPrice += parseFloat(displayItem.price));\n\t\t\t\tnewTransactionInfo.totalPrice = totalPrice.toString();\n\n\t\t\t\treturn newTransactionInfo;\n\t\t\t} );\n\t\t}\n\n\t\t/**\n\t\t * Provide Google Pay API with a payment amount, currency, and amount status\n\t\t *\n\t\t * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#TransactionInfo|TransactionInfo}\n\t\t * @param {function} resolve callback\n\t\t * @returns {object} transaction info, suitable for use as transactionInfo property of PaymentDataRequest\n\t\t */\n\t\tgetGoogleTransactionInfo( resolve ) {\n\n\t\t\t// get transaction info from cart\n\t\t\tconst data = {\n\t\t\t\taction: `wc_${this.gatewayID}_google_pay_get_transaction_info`,\n\t\t\t}\n\n\t\t\t$.post(this.ajaxURL, data, ( response ) => {\n\n\t\t\t\tconsole.log(response);\n\n\t\t\t\tif (response.success) {\n\t\t\t\t\tresolve( $.parseJSON( response.data ) )\n\t\t\t\t} else {\n\t\t\t\t\tthis.fail_payment( 'Could not build transaction info. ' + response.data.message );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\t/**\n\t\t * Provide a key value store for shipping options.\n\t\t */\n\t\tgetShippingCosts() {\n\n\t\t\t// TODO: get this from WC\n\n\t\t\treturn {\n\t\t\t\t\"shipping-001\": \"0.00\",\n\t\t\t\t\"shipping-002\": \"1.99\",\n\t\t\t\t\"shipping-003\": \"10.00\"\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Provide Google Pay API with shipping address parameters when using dynamic buy flow.\n\t\t *\n\t\t * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#ShippingAddressParameters|ShippingAddressParameters}\n\t\t * @returns {object} shipping address details, suitable for use as shippingAddressParameters property of PaymentDataRequest\n\t\t */\n\t\tgetGoogleShippingAddressParameters() {\n\n\t\t\treturn  {\n\t\t\t\tallowedCountryCodes: ['US'],\n\t\t\t\tphoneNumberRequired: true\n\t\t\t};\n\t\t}\n\n\t\t/**\n\t\t * Provide Google Pay API with shipping options and a default selected shipping option.\n\t\t *\n\t\t * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#ShippingOptionParameters|ShippingOptionParameters}\n\t\t * @returns {object} shipping option parameters, suitable for use as shippingOptionParameters property of PaymentDataRequest\n\t\t */\n\t\tgetGoogleDefaultShippingOptions() {\n\n\t\t\treturn {\n\t\t\t\tdefaultSelectedOptionId: \"shipping-001\",\n\t\t\t\tshippingOptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"id\": \"shipping-001\",\n\t\t\t\t\t\t\"label\": \"Free: Standard shipping\",\n\t\t\t\t\t\t\"description\": \"Free Shipping delivered in 5 business days.\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"id\": \"shipping-002\",\n\t\t\t\t\t\t\"label\": \"$1.99: Standard shipping\",\n\t\t\t\t\t\t\"description\": \"Standard shipping delivered in 3 business days.\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"id\": \"shipping-003\",\n\t\t\t\t\t\t\"label\": \"$10: Express shipping\",\n\t\t\t\t\t\t\"description\": \"Express shipping delivered in 1 business day.\"\n\t\t\t\t\t},\n\t\t\t\t]\n\t\t\t};\n\t\t}\n\n\t\t/**\n\t\t * Provide Google Pay API with a payment data error.\n\t\t *\n\t\t * @see {@link https://developers.google.com/pay/api/web/reference/response-objects#PaymentDataError|PaymentDataError}\n\t\t * @returns {object} payment data error, suitable for use as error property of PaymentDataRequestUpdate\n\t\t */\n\t\tgetGoogleUnserviceableAddressError() {\n\t\t\treturn {\n\t\t\t\treason: \"SHIPPING_ADDRESS_UNSERVICEABLE\",\n\t\t\t\tmessage: \"Cannot ship to the selected address\",\n\t\t\t\tintent: \"SHIPPING_ADDRESS\"\n\t\t\t};\n\t\t}\n\n\t\t/**\n\t\t * Add a Google Pay purchase button alongside an existing checkout button\n\t\t *\n\t\t * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#ButtonOptions|Button options}\n\t\t * @see {@link https://developers.google.com/pay/api/web/guides/brand-guidelines|Google Pay brand guidelines}\n\t\t */\n\t\taddGooglePayButton() {\n\n\t\t\tconst paymentsClient = this.getGooglePaymentsClient();\n\t\t\tconst button = paymentsClient.createButton({\n\t\t\t\tonClick: () => this.onGooglePaymentButtonClicked()\n\t\t\t});\n\t\t\tdocument.getElementById('sv-wc-google-pay-button-container').appendChild(button);\n\t\t}\n\n\t\t/**\n\t\t * Prefetch payment data to improve performance\n\t\t *\n\t\t * @see {@link https://developers.google.com/pay/api/web/reference/client#prefetchPaymentData|prefetchPaymentData()}\n\t\t */\n\t\tprefetchGooglePaymentData() {\n\n\t\t\tthis.getGooglePaymentDataRequest().then( ( paymentDataRequest ) => {\n\n\t\t\t\t// transactionInfo must be set but does not affect cache\n\t\t\t\tpaymentDataRequest.transactionInfo = {\n\t\t\t\t\ttotalPriceStatus: 'NOT_CURRENTLY_KNOWN',\n\t\t\t\t\tcurrencyCode: 'USD'\n\t\t\t\t};\n\t\t\t\tconst paymentsClient = this.getGooglePaymentsClient();\n\t\t\t\tpaymentsClient.prefetchPaymentData(paymentDataRequest);\n\t\t\t} );\n\t\t}\n\n\t\t/**\n\t\t * Process payment data returned by the Google Pay API\n\t\t *\n\t\t * @param {object} paymentData response from Google Pay API after user approves payment\n\t\t * @param {function} resolve callback\n\t\t * @see {@link https://developers.google.com/pay/api/web/reference/response-objects#PaymentData|PaymentData object reference}\n\t\t */\n\t\tprocessPayment(paymentData, resolve) {\n\n\t\t\t// show returned data in developer console for debugging\n\t\t\tconsole.log(paymentData);\n\n\t\t\t// pass payment token to your gateway to process payment\n\t\t\tconst data = {\n\t\t\t\taction: `wc_${this.gatewayID}_google_pay_process_payment`,\n\t\t\t\tnonce: this.processNonce,\n\t\t\t\tpaymentMethod: JSON.stringify(paymentData.paymentMethodData)\n\t\t\t}\n\n\t\t\treturn $.post(this.ajaxURL, data, (response) => {\n\t\t\t\tif (response.success) {\n\t\t\t\t\tresolve({transactionState: 'SUCCESS'});\n\t\t\t\t\twindow.location = response.data.redirect;\n\t\t\t\t} else {\n\t\t\t\t\tresolve({\n\t\t\t\t\t\ttransactionState: 'ERROR',\n\t\t\t\t\t\terror: {\n\t\t\t\t\t\t\tintent: 'SHIPPING_ADDRESS',\n\t\t\t\t\t\t\tmessage: 'Invalid data',\n\t\t\t\t\t\t\treason: 'PAYMENT_DATA_INVALID'\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tthis.fail_payment( 'Payment could no be processed. ' + response.data.message );\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Show Google Pay payment sheet when Google Pay payment button is clicked\n\t\t */\n\t\tonGooglePaymentButtonClicked() {\n\n\t\t\tthis.block_ui();\n\n\t\t\tthis.getGooglePaymentDataRequest().then( ( paymentDataRequest ) => {\n\n\t\t\t\tconsole.log(paymentDataRequest);\n\t\t\t\tconsole.log(paymentDataRequest.transactionInfo);\n\t\t\t\tconsole.log(paymentDataRequest.transactionInfo.displayItems);\n\t\t\t\tconst paymentsClient = this.getGooglePaymentsClient();\n\t\t\t\ttry {\n\t\t\t\t\tpaymentsClient.loadPaymentData(paymentDataRequest);\n\t\t\t\t} catch (err) {\n\t\t\t\t\t// show error in developer console for debugging\n\t\t\t\t\tconsole.error(err);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Initialize Google PaymentsClient after Google-hosted JavaScript has loaded\n\t\t *\n\t\t * Display a Google Pay payment button after confirmation of the viewer's\n\t\t * ability to pay.\n\t\t */\n\t\tinit() {\n\n\t\t\t// initialize for the various pages\n\t\t\tif ($('form.cart').length) {\n\t\t\t\tthis.init_product_page();\n\t\t\t} else if ($('form.woocommerce-cart-form').length) {\n\t\t\t\tthis.init_cart_page();\n\t\t\t} else if ($('form.woocommerce-checkout').length) {\n\t\t\t\tthis.init_checkout_page()\n\t\t\t} else {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst paymentsClient = this.getGooglePaymentsClient();\n\t\t\tpaymentsClient.isReadyToPay(this.getGoogleIsReadyToPayRequest())\n\t\t\t\t.then((response) => {\n\t\t\t\t\tif (response.result) {\n\t\t\t\t\t\tthis.addGooglePayButton();\n\t\t\t\t\t\t// @todo prefetch payment data to improve performance after confirming site functionality\n\t\t\t\t\t\t// this.prefetchGooglePaymentData();\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch((err) => {\n\t\t\t\t\t// show error in developer console for debugging\n\t\t\t\t\tconsole.error(err);\n\t\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Initializes the product page.\n\t\t */\n\t\tinit_product_page() {\n\t\t\tthis.ui_element = $('form.cart');\n\t\t}\n\n\t\t/**\n\t\t * Initializes the cart page.\n\t\t */\n\t\tinit_cart_page() {\n\t\t\tthis.ui_element = $('form.woocommerce-cart-form').parents('div.woocommerce');\n\t\t}\n\n\t\t/**\n\t\t * Initializes the checkout page.\n\t\t */\n\t\tinit_checkout_page() {\n\t\t\tthis.ui_element = $('form.woocommerce-checkout');\n\t\t}\n\n\t\t/**\n\t\t * Fails the purchase based on the gateway result.\n\t\t */\n\t\tfail_payment ( error ) {\n\n\t\t\tconsole.error( '[Google Pay] ' + error );\n\n\t\t\tthis.unblock_ui();\n\n\t\t\tthis.render_errors( [ this.genericError ] );\n\t\t}\n\n\t\t/**\n\t\t * Renders any new errors and bring them into the viewport.\n \t\t */\n\t\trender_errors( errors ) {\n\n\t\t\t// hide and remove any previous errors\n\t\t\t$('.woocommerce-error, .woocommerce-message').remove();\n\n\t\t\t// add errors\n\t\t\tthis.ui_element.prepend('<ul class=\"woocommerce-error\"><li>' + errors.join('</li><li>') + '</li></ul>');\n\n\t\t\t// unblock UI\n\t\t\tthis.ui_element.removeClass('processing').unblock();\n\n\t\t\t// scroll to top\n\t\t\t$('html, body').animate({scrollTop: this.ui_element.offset().top - 100}, 1000);\n\t\t}\n\n\t\t/**\n\t\t * Blocks the payment form UI.\n\t\t */\n\t\tblock_ui() {\n\t\t\tthis.ui_element.block({message: null, overlayCSS: {background: '#fff', opacity: 0.6}});\n\t\t}\n\n\t\t/**\n\t\t * Unblocks the payment form UI.\n\t\t */\n\t\tunblock_ui() {\n\t\t\tthis.ui_element.unblock();\n\t\t}\n\t}\n\n\t$( document.body ).trigger( 'sv_wc_google_pay_handler_v5_8_1_loaded' );\n\n} );\n"],"file":"sv-wc-payment-gateway-google-pay.min.js"}